package slack

import akka.actor.{ActorRef, ActorContext, Props, ActorSystem}
import akka.event.Logging
import io.scalac.slack.bots.system.{HelpBot, CommandsRecognizerBot}
import io.scalac.slack.{BotModules, MessageEventBus}
import io.scalac.slack.api.{Start, BotInfo}
import io.scalac.slack.common.Shutdownable
import io.scalac.slack.common.actors.SlackBotActor
import io.scalac.slack.websockets.WebSocket

import scala.concurrent.Await
import scala.concurrent.duration._

/**
  * Created by markmo on 1/09/2016.
  */
object BotRunner extends Shutdownable {

  val system = ActorSystem("SlackBotSystem")
  val eventBus = new MessageEventBus
  val slackBot = system.actorOf(Props(classOf[SlackBotActor], new BotsBundle, eventBus, this, None), "tombot")
  val botInfo: Option[BotInfo] = None
  val logger = Logging(system, "tombot")

  def main(args: Array[String]): Unit = {
    logger.info("SlackBot started")
    try {
      slackBot ! Start
      slackBot ! WebSocket.Connect("https://tombot1.ngrok.io", 8080, "/echo", withSsl = true)
      Await.result(system.whenTerminated, Duration.Inf)
    } catch {
      case e: Exception =>
        e.printStackTrace()
        logger.error(e.getMessage)
        system.terminate()
        Await.result(system.whenTerminated, 5.seconds)
    }
  }

  sys.addShutdownHook(shutdown())

  override def shutdown(): Unit = {
    slackBot ! WebSocket.Release
    system.terminate()
    Await.result(system.whenTerminated, 5.seconds)
  }

  class BotsBundle extends BotModules {

    override def registerModules(context: ActorContext, websocketClient: ActorRef) = {
      context.actorOf(Props(classOf[CommandsRecognizerBot], eventBus), "commandProcessor")
      context.actorOf(Props(classOf[HelpBot], eventBus), "helpBot")
      context.actorOf(Props(classOf[JokeBot], eventBus), "jokeBot")
    }

  }

}
